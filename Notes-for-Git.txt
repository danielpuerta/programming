						GIT

The major difference between Git and any other VCS is the way Git thinks about its data. Conceptually, most other systems store information as a list of file-based changes. These other systems (CVS, Subversion, Perforce, Bazaar, and so on) think of the information the store as a set of files and the changes made to each file over time (this is commonly described as delta-based version control).

Git doesn't think of or store its data this way, Instead, Git thinks of its data more like a series of snapshots of a miniature filesystem. With Git basically takes a pictore of what all your files look like at that moment and stores a reference to that snapshot. To be efficent, if files have not changed, Git doesn's store the file again, just a link to the previous identifical file it has already store. Git thinks about its data more like a -stream of snapshots-.

Git Has Integrity. Everything in Git is check-summed before it is stored and is then referred to by that checksum. This means it's impossible to change the contents of any file or directory without Git knowing about it. This functionality is built into Git at the lowest levels and is integral to its philosophy. Yo can't lose information in transt or get file corruption without Git being able to detect it.

The mechanism that Git uses for this checksumming is called a SHA-1 hash. This is a 40-character string composed of hexadecimal characters and calculated based on the contents of a file or directory structure in Git. A SHA-1 hash looks something like this: 24b9da6552252987aa493b52f8696cd6d3b00373.

Git Generally Only Adds Data. When tou do actions in Git, nearly all of them only add data to the Git database. It is hard to get the system to do anything that is not undoable or to make it erase data in any way.

The Three States. Git has threee main states that your files can reside in: commited, modified, and staged.

	- Committed means that the data is safely stored in your local database.

	- Modified means that you have changed the file but have not committed it to your database yet.

	- Staged means that you have marked a modified file in its current version to go into yout next commit snapshot.

	 	Working Directory ------ Staging Area ------ .git directory (Repository)

			----(Stage Fixes)---->--------(Commit)------>

The Git directory is where Git stores the metada and object database for yout project. This is the most important part of Git, and it is what is copied when you -clone- a repository from another computer.

The working tree is a single checkout of one version of the project. These files are pulled out of the compressed database in the Git directory and placed on disk for you to use or modify.

The stating area is a file, generally contained in your Git directory, that stores information about that will go into yout next commit. Its technical name in Git parlance is the "index", but the phrase "staging area" works just as well.

The basig Git workflow goes something like this:

	- You modify files in yout working tree
	
	- You selectively stage just those changes you want to be part of your next commit, which adds only those changes to the staging area.
	
	- You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to yout Git directory.

If a particular version of a file is in the Git directory. It's considered committed. If if has been modified and was added to the staging area, it is staged. And if it was changed since it was checked out but has not been staged, it is modifide. 


The Command Line. There are a lot of different ways to use Git. There are the original command-line tools, and there are many graphical user interfaces of varying capabilities.

Git Basics.

Getting a Git Repository. You typically obtain a Git repository in one of two ways:

			- You can take a local directory that is currently not under version constrol, and turn it into Git reposotory, or

			- You can clone an existing Git repository from elsewhere

In either case, you end up with a Git repository on yout local machine.



Initializing a Repository in an Existing Directory. If you have a project directory that is currently not under version control and you want to start controlling it with Git, you first need to go to that project's directory. For example: $ cd /home/daniel/git_repository

					and type: git init

This creates a new subdirectory named .git that contains all of yout necessary repository files - a Git repository skeleton. At this point, nothing in your project is tracked yet. If you want to start version-controlling existing files, you should probably begin tracking those files and do an initial commi. You can accomplish that with a few -git add- commands that specify the files you want to track, followed by a -git commit-. For exampple:

				 $ git add archive.txt
				 $ git add archive2.txt
				 $ git commit

	At this point, you have a Git repository with tracked files and an initial commit.


Cloning and Existing Repository. If you want to get a copy of and existing Git repository, the command you need is: 
				
					git clone

You clone a repository with git clone <url>. For example:
	
			git clone https://github.com/danielpuerta/Notes-for-Git

That creates a directory named Notes-for-Git, initializaed a .git directory inside it, pulls down all the data for that repository, and checks out a working copy of the latest version. If you go into the new Notes-for-Git directory that was just created, you'll see the project files in there.


If you want to clone the repository into a directory named something other than new-directory youc an specify the new directory name as an additional argument:

		     $ git clone https://github.com/danielpuerta/Notes-for-Git new-directory

That command does the same thing as the precious one, but the targe directory is called new-directory.


Recording Changes to the Repository. At this point, you should have a bona fide Git repository on your local machine, and a checkout or working copy of all of its files in front you. Typically, you'll want to start making changes and committing snapshots of those changes into yout repository each time the project reaches a state you want to record.

Remenber that each file in your working directory can be in one of two states: tracked or untracked. Tracked files are files that were in the last snapshot; they can be unmodified, modified, or staged. In short, tracked files are files that Git knows about.

Untracked files are everything else, any files in yout working directory that were not in yout last snapshot and are not in yout staging area. When you first clone a repository, all of your files will be tracked and unmodified because Git just checked them out and you haven't edited anything.

As you edit files, Git sees them as modified, because you've changed them since yout last commit. As you work, you selectively stage these modified files and then commit all those staged changes, and the cycle repeats.

	

$ git status is the main tool you use to determine which files are in which state. If you run this command directly after a clone, you should see something like this:

						$ git status
						On branch master
						Your branch is up-to-date with 'origin/master'.
						nothing to commit, working directory clean

This means you have a clean working directory, in other words, none of your tracked files are modified. Git also doesn't see any untracked files, or they would be listed here.


$ git add FILE you use the command git add, when you want to run tracking a new file.

You later of to do that, you can tell it's staged because it's under the "Changed to be committed" heading. If you commit at this point, ther version of the file at the time you ran dit add is that will be in the historical snapshot. You may recall that when you ran git init earlier, you then ran git add <files>, that was to begin tracking files in your directory. The git add command takes a path name for either a file or a directory; if it's a directory, the command adds all the files in that directory recursively.	

While the git status output is pretty comprehensive, it's also quite wordy. Git also has a short status 
flag so you can see your changes in a more compact way. If you run git status -s or git status --short you get a far more simplified output from the command.


Now that your staging area is set up the way you want it, you can commit your changes. Remenber that anything that is still unstaged, any files you have created or modified that you haven't run git add on since you edited them, won't go into this commit. They will stay as modified files on your disk. In this case, let's say that the last time you ran git status, you saw that everything was staged, so you're ready to commit your changes. The simplest way to commit is to type:


					$ git commit

Alternatively, you can type your commit message inline with the commit command by specifying it after a -m flag, like this: 

					$ git commit -m "My first commit, OH YEAH!!"

Now you've created your first commit! You can see that the commit has given you some output about itself: which branch you committed to (master), that SHA-1 checksum the commit has (463dc4f), how many files were changed, and statistics about lines added and removed in the commit.

Remember that the commit records the snapthot you set up in yout staging area. Anything you didn't stage is still sitting there modified; you can do another commit to add it your history. Every time you perform a commit, you're recording a snapshot of yout project that you can revert to or compare to later.

Adding the -a option to the git commit command makes Git automatically stage every file that is already tracked before doing the commit. letting you skip the git add part.


Removing Files. To remove a file from Git, you have to remove it from your tracked files (more accurately, remove it from your staging area) and then commit. The git rm command does that, and also removes the file from your working directory so you don't see it as an untracked file the next time around.

If you simply remove the file from your working directory, it shows up under the "Changes not staged for commit" area of your git status.

If you modified the file and added it to the staging area already, your must force the removal with the -f option.

					$ git rm file.txt -f

Another useful thing you may want to do is to keep the file in your working tree but remote it from your staging area. In other words, you may want to keep the file on your hard drive but not have Git track it anymore. To do this, use the --cache option:

					$ git rm --cache file.txt


Moving Files. If you rename a file in Git, no metadata is stored in Git that tells it you renamed the file. If you want to rename a file in Git, you can run something like:


				        $ git mv file_from file_to

and it works fine. In fact, if you run something like this and look at the status, you'll see that Git considers it a renamed file:

					renamed: file_from -> file_to


Viewing the Commit History. After you have created several commits, or if you have cloned a repository with a existing commit history, you'll probably want to look back to see what has happened. The most basic and poweful too to do this is the git log command.

By default, with no arguments, git log lists the commits made in that repository in reverse chronological order, that is, the most recent commits show up first. This command lists each commit with its SHA-1 checksum, the author's name and email, the date written and the commit message.


Common option to git log:

	
	-p, show the pach introduced with each commit
	--stat, show statistics for files modified in each commit
	--shortstat, display only the changed/insertions/deletions line from --stat
	--name-only, show the list of files modified after the commit information
	--name-status, show the list of files affected with added/modified/deleted
	--abbrev-commit, show only the first few characters of the SHA-1 checksum
	--relative-date, display the date in a relative format
	--graph, display an ASCII graph of the branch and merge history
	--pretty, show commits in an alternate format
	--oneline 

The option --pretty changes the log output to formats other than the default. A few prebuilt options are available for you to use:
	
			--pretty=oneline
			--pretty=short
			--pretty=full
			--pretty=fuller

The most interesting option is format, which allonw you to specify your own log output format, this is especially useful when you're generating output for machine parsing, because you specify the format explecitly, for example:

			$ git log --pretty=format:"%h - %an, %ar : %s"

Useful options for git log --pretty=format (All preceding by %:):

		- H, commit hash
		- h, abbreviated commit hash
		- T, tree hash
		- t, abbreviated tree hash
		- P, parent hashes
		- p, abbreviated parent hashes
		- an, author name
		- ae, author email
		- ad, author date
		- ar, author date, relative
		- cn, commit name
		- ce, committer email
		- cd, committer date
		- cr, committer date, relative
		- s, commit message

What's the difference between committer and author? 
The author is the person who originally wrote the work, whereas the committer is the person who last applied the work.

Limiting Log Ouput. In addition to output-formatting options, git log takes a number of useful limiting options, that is options that let you whot only a subset of commits. For example: 

				$ git log -2 

Shows only the last two commits. In fact you can do -<n>, where n is any integer to show the last n commit.

However, the time-limiting options such as --since and --ulting are very useful. For example, this command gets the list of commits made in the last two weeks:

				$ git log --since=2.weeks

Another really helpfull filter is the -S option (colloquially referred to as Git's "pickaxe" option) which takes a string and shows onlu those commits that changed the number of occurences of that string. For instance, if you wanted to find the last commit that added or removed a reference specific function, you could call:

				$ git log -S function_name 

Option to limit the output of git log:

			-<n>, show only the last n commits
			--since,--after, limit the commits to those made after the specified date
			--until,--before, limit the commits to those made before the specified date
			--author, only show commits in which the author entry matches the specified string
			--committer, only show commit with a commit message containing the string
			--grep, only show commit with a commit message containing the string
			-S only show commit adding or removing code matching the string


Undoint Things. One of the common undos takes place when you commit too early and possibly forget to add some files, or you mess up your commit message. If you want to redo that commit, make the additional changes you forgot, stage them, and commit again, as:

				$ git commit --amend

This command takes your staging area and uses it for the commit. If you've made no changes since your last commit then your snapshot will look exactly the same, and you'll change is your commit message.

As an example, if you commit and then realiza you forgot to stage the changes in a file you wanted to add to this commit, you can do something like this:

				$ git commit -m 'initial commit'
				$ git add forgotten_file
				$ git commit --amend

And, you end up with a single commit, the second commit replaces the results of the first.


Unstating a Staged File. let's say you've changed two files and want to commit them as two separate changes,but you accidentally type <git add *> and stage them both. How can you unstage one of the two? the git status command reminds you:

				$ git add *
				$ git status 
				On branch master
				Changes to be commited:	
				  (use "git reset HEAD <file> ..." to unstage)
					
				     rename: file_from -> file_to	
				     modified: file.md

Right below the "Changes to be committed" text, it says "uset the git reset HEAD <file>...
to unstage.



Unmodifying a Modified File. What if you realiza that you don't want to keep yout changes to the file.md? How can you easily unmodify it? revert it back to what if looked like when you last committed? Luckily git status tells you how to do that, too. 

		  Changes not staged for commit:
			(use "git add/rm <file> ... " to update what will e committed)
			(use "git checkout -- <file> ... " to discard changed in working directory)


So:				$ git checkout -- file.md



Working with Remotes. To be able to collaborate on any Git project, you need know hot to manage yout remote repositories. Remote repositores are versions of your project that are hosted on the Internet or network somewhere. You can have several of them, each of which generally is either read-only of read/write for you. Collaborating with other involves managing these remote repositories and pushing and pulling data to and from them when you need to share work. Managing remote repositories includes knowing how to add remote repositories, remove remotes that are no longer valid, manage various remote branches and define them as being tracked or not.

Showing Your Remotes. To see which remote servers you have configured, you can run the git rmeote command. It lists the shortnames of each remote handle you've spedified. It you've cloned your repository, you should least see origin that is the default name Git gives to the server you clone from.

					$ git remote
					origin

You can also specify -v, which shows you the URLs that Git has stored for the shortname to be used when reading and writing to that remote


Adding Remote Repositories. To add a new remote Git repository as a shortname you can reference easily, run:

				$ git remote add <shortname> <url>



Fetching and Pulling from Your Remotes. To get data from remote projects, you can run:

				$ git fetch <remote>

The command goes out to that remote project and pulls down all the data from that remote project that you don't have yet. After you do this, you should have references to all the brnaches from that remote, which you can merge in or inspect at any time.

If you clone a repository, the command automatically adds that remote repository under the name "origin". So, <$ git fetch origin> fetches any new work that has been pushed to that server since you cloned (or last fetched from) it. It's important to note that the git fetch command only downloads the data to your local repository, it doesn't automatically merge it with any of your work or modify what you're current working on. You have to merge it manually into your work when you're ready.

If your current branch is set up to track a remote branch, you can use the git pull command to automatically fetch and then merge that remote branch into your current branch. Running git pull generally fetches data from the server you originally cloned from and automatically tries to merge into the code you're currently working on.


Pushing to Yor Remotes. When you have your project at a point that you have to share, you have to push it upstream. The command for this is simple <$ git push <remote> <branch>>. If you want to push your master branch to your origin server then you can run this to push any commits you've done back up to the server:

				$ git push origin master

This command works only if you cloned from a server to which you have write access and if nobody has pushed in the meantime. 



Renaming and Removing Remotes. You can run git remote rename to change a remote's shortname. For instance, if you want to rename file1 to file2, you can do so with:

				$ git remote rename file1 file2

If yout want to remote a remote for some reason, you can use

			$ git remote remove or $ git remote rmc


Tagging. Like most VCSs, Git has the ability to tag specific points in history as being important. Typicaly people use this funcionality to mark release points (v1.0, and so on).


How can you listing your tags? you can use:

			$ git tag (with optional -l or --list)

That command lists the tags in alphabetical order; the order in which ther appear has no rel importance.

You can also search for tags that march a particular pattern. You can something like this:


			$ git tag -l "v1.8.5" 

For listing tag wildcards requires -l or --list option.



How can you create a tag? Git supports two types of tags: lightweight and annotated.

A lightweight tag is very much like a branch that doesn't change, it's just a pointer to a specific commit.

Annoted tags, however, are stored as full objets in the Git database. They're checksummed: contain the tagger name, email, and date; have a tagging message; and can be signed and verified with GNU Privacy Guard.

To create an annoted tag you can run:

			$ git tag -a v1.4 -m "my version 1.4"

To create a lightweight tag don't supply any of the -a, -s or -m options, just provide a tag name:
			$ git tag v1.4-lw
		

Sharing Tags. By defaylt, the git push command doesn't transfer tags to remote servers. You will have to explicitly push tags to a shared server after you have created them. This process is just like sharing remote branches, you can run:

			$ git push origin <tagname>

If you have a lot of tags that you want to push up at one, you can also use the --tags option to the git push. This will transfer all of your tags to the remote server that are not already there.

			$ git push origin --tags